// src/features/Question/QuestionSlice.jsx
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import apiClient from '../../app/apiClient';  // apiClient'Ä± import ediyoruz

// API'den sorularÄ± almak iÃ§in thunk fonksiyonu
export const fetchQuestionsByTestId = createAsyncThunk(
    'question/fetchQuestionsByTestId',
    (testId, { rejectWithValue }) => {
        return apiClient.get(`Questions/GetQuestionsByTestId/${testId}`)  // API'ye istek atÄ±yoruz
            .then(response => response.data)  // Veriyi dÃ¶ndÃ¼rÃ¼yoruz
            .catch(error => rejectWithValue(error.response?.data || 'API hata mesajÄ±'));  // Hata durumunda mesaj
    }
);

export const fetchTestById = createAsyncThunk(
    'question/fetchTestById',
    (testId, { rejectWithValue }) => {
        return apiClient.get(`Tests/${testId}`)
            .then(response => response.data)
            .catch(error => rejectWithValue(error.response?.data || 'Test API hata mesajÄ±'));
    }
);

export const createFullQuestion = createAsyncThunk(
    'question/createFullQuestion',
    async (formData, { rejectWithValue }) => {
        try {
            const response = await apiClient.post('Questions/create-full-question', formData, {
                headers: { 'Content-Type': 'multipart/form-data' },
            });
            return response.data;
        } catch (error) {
            return rejectWithValue(error.response?.data || 'Soru oluÅŸturulamadÄ±');
        }
    }
);


const questionSlice = createSlice({
    name: 'question',
    initialState: {
        questions: [],
        test: null,            // ðŸ‘ˆ Test bilgisi iÃ§in alan
        status: 'idle',
        testStatus: 'idle',    // ðŸ‘ˆ Test yÃ¼klenme durumu
        error: null,
        testError: null,       // ðŸ‘ˆ Test hata mesajÄ±
        createStatus: 'idle',   // âœ… yeni eklendi
        createError: null,      // âœ… yeni eklendi
    },
    reducers: {},
    extraReducers: (builder) => {
        builder
            // âœ… Sorular
            .addCase(fetchQuestionsByTestId.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchQuestionsByTestId.fulfilled, (state, action) => {
                state.status = 'succeeded';
                state.questions = action.payload;
            })
            .addCase(fetchQuestionsByTestId.rejected, (state, action) => {
                state.status = 'failed';
                state.error = action.payload;
            })

            // âœ… Test
            .addCase(fetchTestById.pending, (state) => {
                state.testStatus = 'loading';
            })
            .addCase(fetchTestById.fulfilled, (state, action) => {
                state.testStatus = 'succeeded';
                state.test = action.payload;
            })
            .addCase(fetchTestById.rejected, (state, action) => {
                state.testStatus = 'failed';
                state.testError = action.payload;
            })
            .addCase(createFullQuestion.pending, (state) => {
                state.createStatus = 'loading';
                state.createError = null;
            })
            .addCase(createFullQuestion.fulfilled, (state, action) => {
                state.createStatus = 'succeeded';
                // Ä°steÄŸe baÄŸlÄ±: yeni eklenen soruyu listeye ekleyebilirsiniz
                // state.questions.push(action.payload);
            })
            .addCase(createFullQuestion.rejected, (state, action) => {
                state.createStatus = 'failed';
                state.createError = action.payload;
            })

    },
});

export default questionSlice.reducer;
